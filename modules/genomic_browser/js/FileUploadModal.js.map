{"version":3,"sources":["webpack:///modules/genomic_browser/js/FileUploadModal.js","webpack:///webpack/bootstrap c878362fe357f08fbab2?15e8*************************","webpack:///./modules/genomic_browser/jsx/FileUploadModal.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","Object","defineProperty","value","GenomicFileUploadModal","React","createClass","displayName","propTypes","baseURL","PropTypes","string","isRequired","getInitialState","readyForUpload","submited","uploadSummary","shouldComponentUpdate","nextProps","nextState","this","state","props","validateForm","requiredInputs","setState","reduce","previousValue","currentValue","currentIndex","array","reloadPage","$","modal","click","handleUploadSubmit","event","preventDefault","self","formData","FormData","document","getElementById","xhr","XMLHttpRequest","previousText","onerror","console","error","onreadystatechange","bar","readyState","newResponse","responseText","substring","length","result","JSON","parse","innerHTML","String","message","style","width","progress","undefined","className","e","url","open","send","render","footerButtons","push","createElement","key","onClick","data-dismiss","role","aria-disabled","type","tabIndex","aria-labelledby","aria-hidden","UploadForm","validate","RGenomicFileUploadModal","createFactory","fileType","useColumnHeaders","getDefaultProps","handleFileTypeChange","target","handleCheckboxChange","name","componentWillUpdate","prevProps","prevState","instructions","inputs","FileTypeSelect","multiple","onFileTypeChange","label","FileInput","TextAreaInput","CheckboxInput","handleChange","checked","ProgressBar","encType","method","getFileType","availableFileType","componentDidMount","getGenomicFileType","genomicFileType","concat","options","map","htmlFor","color","onChange","cols","rows","border","defaultChecked","marginRight","height","aria-valuenow","aria-valuemin","aria-valuemax","window","default"],"mappings":"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","file":"./modules/genomic_browser/js/FileUploadModal.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/* exported  GenomicFileUploadModal, RGenomicFileUploadModal, UploadForm,\n\tFileTypeSelect, FileInput, TextAreaInput, CheckboxInput, ProgressBar\n\t*/\n\t\n\tvar GenomicFileUploadModal = React.createClass({\n\t  displayName: 'GenomicFileUploadModal',\n\t\n\t\n\t  propTypes: {\n\t    baseURL: React.PropTypes.string.isRequired\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      readyForUpload: false,\n\t      submited: false,\n\t      uploadSummary: {}\n\t    };\n\t  },\n\t\n\t  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {\n\t    return nextState.readyForUpload !== this.state.readyForUpload || nextState.submited !== this.state.submited || nextProps.id !== this.props.id;\n\t  },\n\t\n\t  validateForm: function validateForm(requiredInputs) {\n\t    // this is always returning true... for now\n\t    requiredInputs = requiredInputs || [];\n\t    this.setState({\n\t      readyForUpload: requiredInputs.reduce(function (previousValue, currentValue, currentIndex, array) {\n\t        return previousValue;\n\t      }, true)\n\t    });\n\t  },\n\t\n\t  reloadPage: function reloadPage() {\n\t    $('#modalContainer').modal('hide');\n\t    $('#showdata').click();\n\t  },\n\t\n\t  handleUploadSubmit: function handleUploadSubmit(event) {\n\t    event.preventDefault();\n\t    var self = this;\n\t    var formData = new FormData(document.getElementById('uploadForm'));\n\t\n\t    var xhr = new XMLHttpRequest();\n\t    xhr.previousText = '';\n\t    xhr.onerror = function () {\n\t      console.error(\"[XHR] Fatal Error.\");\n\t    };\n\t    xhr.onreadystatechange = function () {\n\t      var bar = document.getElementById(\"progressBar\");\n\t      try {\n\t        switch (xhr.readyState) {\n\t          case 0:\n\t            break;\n\t          case 1:\n\t            break;\n\t          case 2:\n\t            break;\n\t          case 3:\n\t\n\t            var newResponse = xhr.responseText.substring(xhr.previousText.length);\n\t            var result = JSON.parse(newResponse);\n\t            bar.innerHTML = String(result.message);\n\t            bar.style.width = result.progress + \"%\";\n\t            if (result.error !== undefined) {\n\t              bar.className = 'progress-bar progress-bar-danger';\n\t            }\n\t\n\t            xhr.previousText = xhr.responseText;\n\t            break;\n\t          case 4:\n\t            self.setState({ submited: true });\n\t            break;\n\t          default:\n\t            break;\n\t        }\n\t      } catch (e) {\n\t        console.error(\"[XHR STATECHANGE] Exception: \" + e);\n\t        bar.innerHTML = 'An error occured';\n\t        bar.className = 'progress-bcar progress-bar-danger';\n\t        bar.style.width = \"100%\";\n\t      }\n\t    };\n\t    var url = this.props.baseURL + \"/genomic_browser/ajax/genomic_file_upload.php\";\n\t    xhr.open(\"POST\", url, true);\n\t    xhr.send(formData);\n\t  },\n\t\n\t  render: function render() {\n\t    var footerButtons = [];\n\t\n\t    if (this.state.submited) {\n\t      footerButtons.push(React.createElement(\n\t        'button',\n\t        { key: 'submited', className: 'btn btn-default', onClick: this.reloadPage, 'data-dismiss': 'modal' },\n\t        'Ok'\n\t      ));\n\t    } else {\n\t      if (this.state.readyForUpload) {\n\t        footerButtons.push(React.createElement(\n\t          'button',\n\t          { key: 'readyForUpload', className: 'btn btn-primary', onClick: this.handleUploadSubmit, role: 'button', 'aria-disabled': 'false' },\n\t          'Upload'\n\t        ));\n\t      }\n\t\n\t      footerButtons.push(React.createElement(\n\t        'button',\n\t        { key: 'cancel', className: 'btn btn-default', id: 'cancelButton', role: 'reset', type: 'reset', 'data-dismiss': 'modal' },\n\t        'Cancel'\n\t      ));\n\t    }\n\t    return React.createElement(\n\t      'div',\n\t      { className: 'modal fade', id: 'fileUploadModal', tabIndex: '-1', role: 'dialog', 'aria-labelledby': 'myModalLabel', 'aria-hidden': 'true' },\n\t      React.createElement(\n\t        'div',\n\t        { className: 'modal-dialog' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'modal-content' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'modal-header' },\n\t            React.createElement(\n\t              'button',\n\t              { type: 'button', className: 'close', 'data-dismiss': 'modal' },\n\t              React.createElement(\n\t                'span',\n\t                { 'aria-hidden': 'true' },\n\t                '\\xD7'\n\t              ),\n\t              React.createElement(\n\t                'span',\n\t                { className: 'sr-only' },\n\t                'Close'\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'h3',\n\t              { className: 'modal-title', id: 'myModalLabel' },\n\t              'Upload File'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'modal-body' },\n\t            React.createElement(UploadForm, { baseURL: this.props.baseURL, validate: this.validateForm })\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'modal-footer' },\n\t            footerButtons\n\t          )\n\t        )\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\tvar RGenomicFileUploadModal = React.createFactory(GenomicFileUploadModal);\n\t\n\tvar UploadForm = React.createClass({\n\t  displayName: 'UploadForm',\n\t\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      baseURL: '',\n\t      fileType: \"\",\n\t      useColumnHeaders: true // Change this to false when we are ready to use Mapping files\n\t    };\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      validate: null\n\t    };\n\t  },\n\t\n\t  handleFileTypeChange: function handleFileTypeChange(event) {\n\t    event.preventDefault();\n\t    this.setState({ fileType: event.target.value });\n\t  },\n\t\n\t  handleCheckboxChange: function handleCheckboxChange(event) {\n\t    if (event.target.name === 'pscidColumn') {\n\t      this.setState({ useColumnHeaders: !this.state.useColumnHeaders });\n\t    }\n\t  },\n\t\n\t  componentWillUpdate: function componentWillUpdate(prevProps, prevState) {\n\t    this.props.validate();\n\t  },\n\t\n\t  render: function render() {\n\t    var instructions = [];\n\t    var inputs = [];\n\t\n\t    inputs.push(React.createElement(FileTypeSelect, { key: 'fileType', baseURL: this.props.baseURL, multiple: false, onFileTypeChange: this.handleFileTypeChange, name: 'fileType', label: 'File type:' }));\n\t\n\t    switch (this.state.fileType) {\n\t      case 'Methylation beta-values':\n\t        inputs.push(React.createElement(FileInput, { key: 'fileData', name: 'fileData', label: 'File :' }));\n\t        inputs.push(React.createElement(TextAreaInput, { key: 'description', name: 'description', label: 'Description :' }));\n\t        if (!this.state.useColumnHeaders) {\n\t          inputs.push(React.createElement(FileInput, { key: 'fileMapping', name: 'fileMapping', label: 'Mapping :' }));\n\t        }\n\t        inputs.push(React.createElement(CheckboxInput, { key: 'pscidColumn', handleChange: this.handleCheckboxChange, checked: this.state.useColumnHeaders, name: 'pscidColumn' }));\n\t        inputs.push(React.createElement(ProgressBar, { key: 'progressbar', name: 'progressbar', label: 'Progress :' }));\n\t        break;\n\t      case 'Other':\n\t        inputs.push(React.createElement(FileInput, { key: 'fileData', name: 'fileData', label: 'File :' }));\n\t        inputs.push(React.createElement(TextAreaInput, { key: 'description', name: 'description', label: 'Description :' }));\n\t        inputs.push(React.createElement(ProgressBar, { key: 'progressbar', name: 'progressbar', label: 'Progress :' }));\n\t        break;\n\t      default:\n\t      // noop\n\t    }\n\t\n\t    return React.createElement(\n\t      'form',\n\t      { name: 'uploadForm', id: 'uploadForm', encType: 'multipart/form-data', method: 'POST' },\n\t      React.createElement(\n\t        'div',\n\t        { className: 'row' },\n\t        instructions,\n\t        inputs\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\tvar FileTypeSelect = React.createClass({\n\t  displayName: 'FileTypeSelect',\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      baseURL: '',\n\t      onFileTypeChange: null,\n\t      getFileType: null\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      availableFileType: []\n\t    };\n\t  },\n\t\n\t  componentDidMount: function componentDidMount() {\n\t    this.getGenomicFileType();\n\t  },\n\t\n\t  getGenomicFileType: function getGenomicFileType() {\n\t    var self = this;\n\t    var xhr = new XMLHttpRequest();\n\t    xhr.onreadystatechange = function () {\n\t      try {\n\t        switch (xhr.readyState) {\n\t          case 0:\n\t            break;\n\t          case 1:\n\t            break;\n\t          case 2:\n\t            break;\n\t          case 3:\n\t            xhr.previousText = xhr.responseText;\n\t            break;\n\t          case 4:\n\t            var fileType = [{ genomicFileType: '' }].concat(JSON.parse(xhr.responseText));\n\t            self.setState({ availableFileType: fileType });\n\t            break;\n\t          default:\n\t            break;\n\t        }\n\t      } catch (e) {\n\t        console.error(\"Exception: \" + e);\n\t      }\n\t    };\n\t    var url = this.props.baseURL + \"/AjaxHelper.php?Module=genomic_browser&script=get_genomic_file_type.php\";\n\t    xhr.open(\"POST\", url, true);\n\t    xhr.send();\n\t  },\n\t\n\t  render: function render() {\n\t    var options = this.state.availableFileType.map(function (e) {\n\t      return React.createElement(\n\t        'option',\n\t        { key: e.genomicFileType, value: e.genomicFileType },\n\t        e.genomicFileType\n\t      );\n\t    });\n\t\n\t    return React.createElement(\n\t      'div',\n\t      { className: 'col-xs-12 form-group' },\n\t      React.createElement(\n\t        'label',\n\t        { htmlFor: this.props.name, className: 'col-xs-3' },\n\t        this.props.label,\n\t        React.createElement(\n\t          'font',\n\t          { color: 'red' },\n\t          React.createElement(\n\t            'sup',\n\t            null,\n\t            ' *'\n\t          )\n\t        )\n\t      ),\n\t      React.createElement(\n\t        'div',\n\t        { className: 'col-xs-9' },\n\t        React.createElement(\n\t          'select',\n\t          { name: this.props.name, id: this.props.name, className: 'form-fields form-control input-sm', onChange: this.props.onFileTypeChange },\n\t          options\n\t        )\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\tvar FileInput = React.createClass({\n\t  displayName: 'FileInput',\n\t\n\t\n\t  propTypes: {\n\t    name: React.PropTypes.string,\n\t    label: React.PropTypes.string\n\t  },\n\t\n\t  render: function render() {\n\t    return React.createElement(\n\t      'div',\n\t      { className: 'col-xs-12 form-group' },\n\t      React.createElement(\n\t        'label',\n\t        { className: 'col-xs-3', htmlFor: this.props.name },\n\t        this.props.label\n\t      ),\n\t      React.createElement(\n\t        'div',\n\t        { className: 'col-xs-9' },\n\t        React.createElement('input', { type: 'file', name: this.props.name, id: this.props.name, onChange: this.handleChange, className: 'fileUpload' })\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\tvar TextAreaInput = React.createClass({\n\t  displayName: 'TextAreaInput',\n\t\n\t\n\t  propTypes: {\n\t    name: React.PropTypes.string,\n\t    label: React.PropTypes.string\n\t  },\n\t\n\t  render: function render() {\n\t    return React.createElement(\n\t      'div',\n\t      { className: 'col-xs-12 form-group' },\n\t      React.createElement(\n\t        'label',\n\t        { className: 'col-xs-3', htmlFor: this.props.name },\n\t        this.props.label\n\t      ),\n\t      React.createElement(\n\t        'div',\n\t        { className: 'col-xs-9' },\n\t        React.createElement('textarea', { cols: '20', rows: '3', name: this.props.name, onChange: this.handleChange, id: this.props.name, style: { border: '2px inset' }, className: 'ui-corner-all form-fields form-control input-sm' })\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\tvar CheckboxInput = React.createClass({\n\t  displayName: 'CheckboxInput',\n\t\n\t  propTypes: {\n\t    name: React.PropTypes.string\n\t  },\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      checked: this.props.checked || false\n\t    };\n\t  },\n\t  render: function render() {\n\t    // Add onClick={this.props.handleChange}  and checked={this.state.checked} when we support Mapping files\n\t    return React.createElement(\n\t      'div',\n\t      { className: 'form-group col-sm-12' },\n\t      React.createElement('label', { className: 'col-xs-3' }),\n\t      React.createElement(\n\t        'div',\n\t        { className: 'col-xs-9' },\n\t        React.createElement('input', { className: 'user-success', name: this.props.name, id: this.props.name, type: 'checkbox', defaultChecked: 'true', style: { marginRight: '1em' } }),\n\t        'Use PSCID in column headers',\n\t        this.props.label\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\tvar ProgressBar = React.createClass({\n\t  displayName: 'ProgressBar',\n\t\n\t\n\t  propTypes: {\n\t    name: React.PropTypes.string,\n\t    label: React.PropTypes.string\n\t  },\n\t\n\t  render: function render() {\n\t    return React.createElement(\n\t      'div',\n\t      { className: 'col-xs-12 form-group' },\n\t      React.createElement(\n\t        'label',\n\t        { className: 'col-xs-3', htmlFor: this.props.name },\n\t        this.props.label\n\t      ),\n\t      React.createElement(\n\t        'div',\n\t        { className: 'col-xs-9' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'progress', style: { height: \"20px\" } },\n\t          React.createElement('div', { className: 'progress-bar progress-bar-success', id: 'progressBar', role: 'progressbar', 'aria-valuenow': '0', 'aria-valuemin': '0', 'aria-valuemax': '100' })\n\t        )\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\twindow.GenomicFileUploadModal = GenomicFileUploadModal;\n\twindow.RGenomicFileUploadModal = RGenomicFileUploadModal;\n\twindow.UploadForm = UploadForm;\n\twindow.FileTypeSelect = FileTypeSelect;\n\twindow.FileInput = FileInput;\n\twindow.TextAreaInput = TextAreaInput;\n\twindow.CheckboxInput = CheckboxInput;\n\twindow.ProgressBar = ProgressBar;\n\t\n\texports.default = {\n\t  GenomicFileUploadModal: GenomicFileUploadModal,\n\t  RGenomicFileUploadModal: RGenomicFileUploadModal,\n\t  UploadForm: UploadForm,\n\t  FileTypeSelect: FileTypeSelect,\n\t  FileInput: FileInput,\n\t  TextAreaInput: TextAreaInput,\n\t  CheckboxInput: CheckboxInput,\n\t  ProgressBar: ProgressBar\n\t};\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/genomic_browser/js/FileUploadModal.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c878362fe357f08fbab2","/* exported  GenomicFileUploadModal, RGenomicFileUploadModal, UploadForm,\nFileTypeSelect, FileInput, TextAreaInput, CheckboxInput, ProgressBar\n*/\n\nvar GenomicFileUploadModal = React.createClass({\n\n  propTypes: {\n    baseURL: React.PropTypes.string.isRequired\n  },\n\n  getInitialState: function() {\n    return {\n      readyForUpload: false,\n      submited: false,\n      uploadSummary: {}\n    };\n  },\n\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return nextState.readyForUpload !== this.state.readyForUpload ||\n               nextState.submited !== this.state.submited ||\n               nextProps.id !== this.props.id;\n  },\n\n  validateForm: function(requiredInputs) {\n    // this is always returning true... for now\n    requiredInputs = requiredInputs || [];\n    this.setState({\n      readyForUpload: requiredInputs.reduce(\n        function(previousValue, currentValue, currentIndex, array) {\n          return previousValue;\n        }, true)\n    });\n  },\n\n  reloadPage: function() {\n    $('#modalContainer').modal('hide');\n    $('#showdata').click();\n  },\n\n  handleUploadSubmit: function(event) {\n    event.preventDefault();\n    var self = this;\n    var formData = new FormData(document.getElementById('uploadForm'));\n\n    var xhr = new XMLHttpRequest();\n    xhr.previousText = '';\n    xhr.onerror = function() {\n      console.error(\"[XHR] Fatal Error.\");\n    };\n    xhr.onreadystatechange = function() {\n      var bar = document.getElementById(\"progressBar\");\n      try {\n        switch (xhr.readyState) {\n          case 0:\n            break;\n          case 1:\n            break;\n          case 2:\n            break;\n          case 3:\n\n            var newResponse = xhr.responseText.substring(xhr.previousText.length);\n            var result = JSON.parse(newResponse);\n            bar.innerHTML = String(result.message);\n            bar.style.width = result.progress + \"%\";\n            if (result.error !== undefined) {\n              bar.className = 'progress-bar progress-bar-danger';\n            }\n\n            xhr.previousText = xhr.responseText;\n            break;\n          case 4:\n            self.setState({submited: true});\n            break;\n          default:\n            break;\n        }\n      } catch (e) {\n        console.error(\"[XHR STATECHANGE] Exception: \" + e);\n        bar.innerHTML = 'An error occured';\n        bar.className = 'progress-bcar progress-bar-danger';\n        bar.style.width = \"100%\";\n      }\n    };\n    var url = this.props.baseURL + \"/genomic_browser/ajax/genomic_file_upload.php\";\n    xhr.open(\"POST\", url, true);\n    xhr.send(formData);\n  },\n\n  render: function() {\n    var footerButtons = [];\n\n    if (this.state.submited) {\n      footerButtons.push(<button key=\"submited\" className=\"btn btn-default\" onClick={this.reloadPage} data-dismiss=\"modal\">Ok</button>);\n    } else {\n      if (this.state.readyForUpload) {\n        footerButtons.push(<button key=\"readyForUpload\" className=\"btn btn-primary\" onClick={this.handleUploadSubmit} role=\"button\" aria-disabled=\"false\">Upload</button>);\n      }\n\n      footerButtons.push(<button key=\"cancel\" className=\"btn btn-default\" id=\"cancelButton\" role=\"reset\" type=\"reset\" data-dismiss=\"modal\">Cancel</button>);\n    }\n    return (\n            <div className=\"modal fade\" id=\"fileUploadModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\"><span aria-hidden=\"true\">&times;</span><span className=\"sr-only\">Close</span></button>\n                            <h3 className=\"modal-title\" id=\"myModalLabel\">Upload File</h3>\n                        </div>\n                        <div className=\"modal-body\">\n                            <UploadForm baseURL={this.props.baseURL} validate={this.validateForm}/>\n                        </div>\n                        <div className=\"modal-footer\">\n                            {footerButtons}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n  }\n});\n\nvar RGenomicFileUploadModal = React.createFactory(GenomicFileUploadModal);\n\nvar UploadForm = React.createClass({\n\n  getInitialState: function() {\n    return {\n      baseURL: '',\n      fileType: \"\",\n      useColumnHeaders: true // Change this to false when we are ready to use Mapping files\n    };\n  },\n\n  getDefaultProps: function() {\n    return {\n      validate: null\n    };\n  },\n\n  handleFileTypeChange: function(event) {\n    event.preventDefault();\n    this.setState({fileType: event.target.value});\n  },\n\n  handleCheckboxChange: function(event) {\n    if (event.target.name === 'pscidColumn') {\n      this.setState({useColumnHeaders: !this.state.useColumnHeaders});\n    }\n  },\n\n  componentWillUpdate: function(prevProps, prevState) {\n    this.props.validate();\n  },\n\n  render: function() {\n    var instructions = [];\n    var inputs = [];\n\n    inputs.push(<FileTypeSelect key=\"fileType\" baseURL={this.props.baseURL} multiple={false} onFileTypeChange={this.handleFileTypeChange} name=\"fileType\" label=\"File type:\"/>);\n\n    switch (this.state.fileType) {\n      case 'Methylation beta-values':\n        inputs.push(<FileInput key=\"fileData\" name=\"fileData\" label=\"File :\"/>);\n        inputs.push(<TextAreaInput key=\"description\" name=\"description\" label=\"Description :\" />);\n        if (!this.state.useColumnHeaders) {\n          inputs.push(<FileInput key=\"fileMapping\" name=\"fileMapping\" label=\"Mapping :\"/>);\n        }\n        inputs.push(<CheckboxInput key=\"pscidColumn\" handleChange={this.handleCheckboxChange} checked={this.state.useColumnHeaders} name=\"pscidColumn\" />);\n        inputs.push(<ProgressBar key=\"progressbar\" name=\"progressbar\" label=\"Progress :\" />);\n        break;\n      case 'Other':\n        inputs.push(<FileInput key=\"fileData\" name=\"fileData\" label=\"File :\"/>);\n        inputs.push(<TextAreaInput key=\"description\" name=\"description\" label=\"Description :\" />);\n        inputs.push(<ProgressBar key=\"progressbar\" name=\"progressbar\" label=\"Progress :\" />);\n        break;\n      default:\n        // noop\n    }\n\n    return (\n            <form name=\"uploadForm\" id=\"uploadForm\" encType=\"multipart/form-data\" method=\"POST\">\n                <div className=\"row\">\n                    {instructions}\n                    {inputs}\n                </div>\n            </form>\n        );\n  }\n});\n\nvar FileTypeSelect = React.createClass({\n  getDefaultProps: function() {\n    return {\n      baseURL: '',\n      onFileTypeChange: null,\n      getFileType: null\n    };\n  },\n\n  getInitialState: function() {\n    return {\n      availableFileType: []\n    };\n  },\n\n  componentDidMount: function() {\n    this.getGenomicFileType();\n  },\n\n  getGenomicFileType: function() {\n    var self = this;\n    var xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = function() {\n      try {\n        switch (xhr.readyState) {\n          case 0:\n            break;\n          case 1:\n            break;\n          case 2:\n            break;\n          case 3:\n            xhr.previousText = xhr.responseText;\n            break;\n          case 4:\n            var fileType = [{genomicFileType: ''}].concat(JSON.parse(xhr.responseText));\n            self.setState({availableFileType: fileType});\n            break;\n          default:\n            break;\n        }\n      } catch (e) {\n        console.error(\"Exception: \" + e);\n      }\n    };\n    var url = this.props.baseURL + \"/AjaxHelper.php?Module=genomic_browser&script=get_genomic_file_type.php\";\n    xhr.open(\"POST\", url, true);\n    xhr.send();\n  },\n\n  render: function() {\n    var options = this.state.availableFileType.map(function(e) {\n      return (<option key={e.genomicFileType} value={e.genomicFileType}>{e.genomicFileType}</option>);\n    }\n        );\n\n    return (\n            <div className=\"col-xs-12 form-group\">\n                <label htmlFor={this.props.name} className=\"col-xs-3\">{this.props.label}<font color=\"red\"><sup> *</sup></font></label>\n                <div className=\"col-xs-9\">\n                    <select name={this.props.name} id={this.props.name} className=\"form-fields form-control input-sm\" onChange={this.props.onFileTypeChange}>\n                        {options}\n                    </select>\n                </div>\n            </div>\n        );\n  }\n});\n\nvar FileInput = React.createClass({\n\n  propTypes: {\n    name: React.PropTypes.string,\n    label: React.PropTypes.string\n  },\n\n  render: function() {\n    return (\n            <div className=\"col-xs-12 form-group\">\n                <label className=\"col-xs-3\" htmlFor={this.props.name}>{this.props.label}</label>\n                <div className=\"col-xs-9\">\n                    <input type=\"file\" name={this.props.name} id={this.props.name} onChange={this.handleChange} className=\"fileUpload\"/>\n                </div>\n            </div>\n        );\n  }\n});\n\nvar TextAreaInput = React.createClass({\n\n  propTypes: {\n    name: React.PropTypes.string,\n    label: React.PropTypes.string\n  },\n\n  render: function() {\n    return (\n            <div className=\"col-xs-12 form-group\">\n                <label className=\"col-xs-3\" htmlFor={this.props.name}>{this.props.label}</label>\n                <div className=\"col-xs-9\">\n                    <textarea cols=\"20\" rows=\"3\" name={this.props.name} onChange={this.handleChange} id={this.props.name} style={{border: '2px inset'}} className=\"ui-corner-all form-fields form-control input-sm\" />\n                </div>\n            </div>\n        );\n  }\n});\n\nvar CheckboxInput = React.createClass({\n  propTypes: {\n    name: React.PropTypes.string\n  },\n  getInitialState: function() {\n    return {\n      checked: this.props.checked || false\n    };\n  },\n  render: function() {\n        // Add onClick={this.props.handleChange}  and checked={this.state.checked} when we support Mapping files\n    return (\n            <div className=\"form-group col-sm-12\">\n                <label className=\"col-xs-3\"></label>\n                <div className=\"col-xs-9\">\n                    <input className=\"user-success\" name={this.props.name} id={this.props.name} type=\"checkbox\" defaultChecked=\"true\" style={{marginRight: '1em'}} />\n                    Use PSCID in column headers\n                    {this.props.label}\n                </div>\n            </div>\n        );\n  }\n});\n\nvar ProgressBar = React.createClass({\n\n  propTypes: {\n    name: React.PropTypes.string,\n    label: React.PropTypes.string\n  },\n\n  render: function() {\n    return (\n            <div className=\"col-xs-12 form-group\">\n                <label className=\"col-xs-3\" htmlFor={this.props.name}>{this.props.label}</label>\n                <div className=\"col-xs-9\">\n                    <div className=\"progress\" style={{height: \"20px\"}}>\n                        <div className=\"progress-bar progress-bar-success\" id=\"progressBar\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"/>\n                    </div>\n                </div>\n            </div>\n        );\n  }\n});\n\nwindow.GenomicFileUploadModal = GenomicFileUploadModal;\nwindow.RGenomicFileUploadModal = RGenomicFileUploadModal;\nwindow.UploadForm = UploadForm;\nwindow.FileTypeSelect = FileTypeSelect;\nwindow.FileInput = FileInput;\nwindow.TextAreaInput = TextAreaInput;\nwindow.CheckboxInput = CheckboxInput;\nwindow.ProgressBar = ProgressBar;\n\nexport default {\n  GenomicFileUploadModal,\n  RGenomicFileUploadModal,\n  UploadForm,\n  FileTypeSelect,\n  FileInput,\n  TextAreaInput,\n  CheckboxInput,\n  ProgressBar\n};\n\n\n\n// WEBPACK FOOTER //\n// ./modules/genomic_browser/jsx/FileUploadModal.js"],"sourceRoot":""}